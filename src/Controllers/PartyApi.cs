/*
 * Songvoter
 *
 * Definition for songvoter API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using .Attributes;
using .Models;

namespace .Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PartyApiController : ControllerBase
    { 
        /// <summary>
        /// Creates an invite link for a party
        /// </summary>
        /// <param name="partyId">ID of party to invite to</param>
        /// <response code="200">invite created</response>
        [HttpGet]
        [Route("/v1/party/{partyId}/inviteLink")]
        [ValidateModelState]
        [SwaggerOperation("CreateInviteLink")]
        public virtual IActionResult CreateInviteLink([FromRoute (Name = "partyId")][Required]string partyId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a new party
        /// </summary>
        /// <response code="200">successful created</response>
        [HttpPost]
        [Route("/v1/partys")]
        [ValidateModelState]
        [SwaggerOperation("CreateParty")]
        [SwaggerResponse(statusCode: 200, type: typeof(Party), description: "successful created")]
        public virtual IActionResult CreateParty()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Party));
            string exampleJson = null;
            exampleJson = "{\n  \"members\" : [ 0, 0 ],\n  \"name\" : \"Birthday\",\n  \"id\" : \"22fed76bbf8e4f8d93f8eb204ea42167\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Party>(exampleJson)
            : default(Party);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// votes a song down so it is play later/not at all
        /// </summary>
        /// <param name="partyId">ID of party</param>
        /// <param name="songId">ID of the song</param>
        /// <response code="200">downvote accepted</response>
        [HttpPost]
        [Route("/v1/party/{partyId}/downvote/{songId}")]
        [ValidateModelState]
        [SwaggerOperation("DownvoteSong")]
        public virtual IActionResult DownvoteSong([FromRoute (Name = "partyId")][Required]string partyId, [FromRoute (Name = "songId")][Required]int songId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns all parties of the curent user
        /// </summary>
        /// <response code="200">successful created</response>
        [HttpGet]
        [Route("/v1/partys")]
        [ValidateModelState]
        [SwaggerOperation("GetParties")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Party>), description: "successful created")]
        public virtual IActionResult GetParties()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Party>));
            string exampleJson = null;
            exampleJson = "{\n  \"members\" : [ 0, 0 ],\n  \"name\" : \"Birthday\",\n  \"id\" : \"22fed76bbf8e4f8d93f8eb204ea42167\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Party>>(exampleJson)
            : default(List<Party>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Invites a user to a party
        /// </summary>
        /// <param name="partyId">ID of party to invite to</param>
        /// <param name="userId">ID of user to invite</param>
        /// <response code="201">invite sent</response>
        [HttpPost]
        [Route("/v1/party/{partyId}/invite/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("InviteToParty")]
        public virtual IActionResult InviteToParty([FromRoute (Name = "partyId")][Required]string partyId, [FromRoute (Name = "userId")][Required]string userId)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Joins a party
        /// </summary>
        /// <param name="partyId">ID of party to join</param>
        /// <response code="201">joined successfully</response>
        [HttpPost]
        [Route("/v1/party/{partyId}/join")]
        [ValidateModelState]
        [SwaggerOperation("JoinParty")]
        public virtual IActionResult JoinParty([FromRoute (Name = "partyId")][Required]string partyId)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            throw new NotImplementedException();
        }

        /// <summary>
        /// kicks a user from a party
        /// </summary>
        /// <param name="partyId">ID of party to leave</param>
        /// <param name="userId">ID of user to kick</param>
        /// <response code="201">left successfully</response>
        [HttpPost]
        [Route("/v1/party/{partyId}/kick/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("KickFromParty")]
        public virtual IActionResult KickFromParty([FromRoute (Name = "partyId")][Required]string partyId, [FromRoute (Name = "userId")][Required]string userId)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Leave a party
        /// </summary>
        /// <param name="partyId">ID of party to leave</param>
        /// <response code="201">left successfully</response>
        [HttpPost]
        [Route("/v1/party/{partyId}/leave")]
        [ValidateModelState]
        [SwaggerOperation("LeaveParty")]
        public virtual IActionResult LeaveParty([FromRoute (Name = "partyId")][Required]string partyId)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            throw new NotImplementedException();
        }

        /// <summary>
        /// gets the next Song
        /// </summary>
        /// <param name="partyId">ID of party</param>
        /// <response code="200">invite created</response>
        [HttpGet]
        [Route("/v1/party/{partyId}/nextSong")]
        [ValidateModelState]
        [SwaggerOperation("NextSong")]
        [SwaggerResponse(statusCode: 200, type: typeof(Song), description: "invite created")]
        public virtual IActionResult NextSong([FromRoute (Name = "partyId")][Required]string partyId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Song));
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 0,\n  \"occurences\" : [ {\n    \"thumbnail\" : \"https://i.ytimg.com/vi/bESGLojNYSo/hq720.jpg\",\n    \"artist\" : \"Lady Gaga\",\n    \"externalId\" : \"bESGLojNYSo\",\n    \"id\" : 6,\n    \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\",\n    \"platform\" : \"youtube\"\n  }, {\n    \"thumbnail\" : \"https://i.ytimg.com/vi/bESGLojNYSo/hq720.jpg\",\n    \"artist\" : \"Lady Gaga\",\n    \"externalId\" : \"bESGLojNYSo\",\n    \"id\" : 6,\n    \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\",\n    \"platform\" : \"youtube\"\n  } ],\n  \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Song>(exampleJson)
            : default(Song);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// resets the parties playing state
        /// </summary>
        /// <param name="partyId">ID of party to invite to</param>
        /// <response code="200">reset party</response>
        [HttpPost]
        [Route("/v1/party/{partyId}/reset")]
        [ValidateModelState]
        [SwaggerOperation("ResetParty")]
        public virtual IActionResult ResetParty([FromRoute (Name = "partyId")][Required]string partyId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// votes a song up so it is play sooner
        /// </summary>
        /// <remarks>Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party</remarks>
        /// <param name="partyId">ID of party</param>
        /// <param name="songId">ID of the song to upvote</param>
        /// <response code="200">upvoted</response>
        [HttpPost]
        [Route("/v1/party/{partyId}/upvote/{songId}")]
        [ValidateModelState]
        [SwaggerOperation("UpvoteSong")]
        public virtual IActionResult UpvoteSong([FromRoute (Name = "partyId")][Required]string partyId, [FromRoute (Name = "songId")][Required]int songId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
