/*
 * Songvoter
 *
 * Definition for songvoter API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using .Attributes;
using .Models;

namespace .Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SongApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new song by url
        /// </summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/v1/songs")]
        [ValidateModelState]
        [SwaggerOperation("AddSong")]
        public virtual IActionResult AddSong([FromBody]SongCreation body)
        { 

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds Song by search term
        /// </summary>
        /// <param name="term">Search term to serach for</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid search term</response>
        [HttpGet]
        [Route("/v1/songs/search")]
        [ValidateModelState]
        [SwaggerOperation("FindSong")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Song>), description: "successful operation")]
        public virtual IActionResult FindSong([FromQuery (Name = "term")][Required()]string term)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Song>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 0,\n  \"occurences\" : [ {\n    \"thumbnail\" : \"https://i.ytimg.com/vi/bESGLojNYSo/hq720.jpg\",\n    \"artist\" : \"Lady Gaga\",\n    \"externalId\" : \"bESGLojNYSo\",\n    \"id\" : 6,\n    \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\",\n    \"platform\" : \"youtube\"\n  }, {\n    \"thumbnail\" : \"https://i.ytimg.com/vi/bESGLojNYSo/hq720.jpg\",\n    \"artist\" : \"Lady Gaga\",\n    \"externalId\" : \"bESGLojNYSo\",\n    \"id\" : 6,\n    \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\",\n    \"platform\" : \"youtube\"\n  } ],\n  \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Song>>(exampleJson)
            : default(List<Song>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find song by ID
        /// </summary>
        /// <remarks>Returns a single song</remarks>
        /// <param name="songId">ID of song to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Song not found</response>
        [HttpGet]
        [Route("/v1/songs/{songId}")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("GetSongById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Song), description: "successful operation")]
        public virtual IActionResult GetSongById([FromRoute (Name = "songId")][Required]long songId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Song));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 0,\n  \"occurences\" : [ {\n    \"thumbnail\" : \"https://i.ytimg.com/vi/bESGLojNYSo/hq720.jpg\",\n    \"artist\" : \"Lady Gaga\",\n    \"externalId\" : \"bESGLojNYSo\",\n    \"id\" : 6,\n    \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\",\n    \"platform\" : \"youtube\"\n  }, {\n    \"thumbnail\" : \"https://i.ytimg.com/vi/bESGLojNYSo/hq720.jpg\",\n    \"artist\" : \"Lady Gaga\",\n    \"externalId\" : \"bESGLojNYSo\",\n    \"id\" : 6,\n    \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\",\n    \"platform\" : \"youtube\"\n  } ],\n  \"title\" : \"Lady Gaga - Poker Face (Official Music Video)\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Song>(exampleJson)
            : default(Song);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
