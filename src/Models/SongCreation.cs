/*
 * Songvoter
 *
 * Definition for songvoter API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using .Converters;

namespace .Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SongCreation : IEquatable<SongCreation>
    {
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }


        /// <summary>
        /// The platform of this song
        /// </summary>
        /// <value>The platform of this song</value>
        [TypeConverter(typeof(CustomEnumConverter<PlatformEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PlatformEnum
        {
            
            /// <summary>
            /// Enum YoutubeEnum for youtube
            /// </summary>
            [EnumMember(Value = "youtube")]
            YoutubeEnum = 1,
            
            /// <summary>
            /// Enum SpotifyEnum for spotify
            /// </summary>
            [EnumMember(Value = "spotify")]
            SpotifyEnum = 2
        }

        /// <summary>
        /// The platform of this song
        /// </summary>
        /// <value>The platform of this song</value>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public PlatformEnum Platform { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SongCreation {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SongCreation)obj);
        }

        /// <summary>
        /// Returns true if SongCreation instances are equal
        /// </summary>
        /// <param name="other">Instance of SongCreation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SongCreation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExternalId == other.ExternalId ||
                    ExternalId != null &&
                    ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    Platform == other.Platform ||
                    
                    Platform.Equals(other.Platform)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SongCreation left, SongCreation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SongCreation left, SongCreation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
