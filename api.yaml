openapi: 3.0.0
info:
  description: Definition for songvoter API
  version: 0.0.1
  title: Songvoter
  termsOfService: https://coflnet.com/terms/
  contact:
    email: support@coflnet.com
  license:
    name: AGPL
    url: https://github.com/Coflnet/song-voter/blob/main/LICENSE
tags:
  - name: song
    description: Everything about Songs
    externalDocs:
      description: ""
      url: http://swagger.io
  - name: list
    description: Manage a playlist
paths:
  /songs:
    post:
      tags:
        - song
      summary: Add a new song by url
      description: ""
      operationId: addSong
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SongCreation"
        description: Pet object that needs to be added to the store
        required: true
      responses:
        "405":
          description: Invalid input
      security:
        - songvoter_auth: ["read:song"]
  /songs/search:
    get:
      tags:
        - song
      summary: Finds Song by search term
      operationId: findSong
      parameters:
        - name: term
          in: query
          description: Search term to serach for
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
        "400":
          description: Invalid search term
      security:
        - jwt: ["read:song"]
  "/song/{songId}":
    get:
      tags:
        - song
      summary: Find song by ID
      description: Returns a single song
      operationId: getSongById
      parameters:
        - name: songId
          in: path
          description: ID of song to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
        "400":
          description: Invalid ID supplied
        "404":
          description: Song not found
      security:
        - songvoter_auth: ["read:song"]
  /lists:
    post:
      tags:
        - list
      summary: Create a new playlist
      operationId: createPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayList"
        description: An array of songIds to be added to the song
        required: true
      responses:
        "200":
          description: successful created list
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PlayList"
    get:
      tags:
        - list
      summary: Get playlist for active user
      operationId: getPlaylists
      responses:
        "200":
          description: successful response
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayList"
  "/lists/{listId}":
    get:
      tags:
        - list
      summary: Find playlist by ID
      description: Returns a playList
      operationId: getListById
      parameters:
        - name: listId
          in: path
          description: ID of list to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayList"
  /auth/google:
    post:
      tags:
        - auth
      summary: Authenticate with google
      description: Exchange a google identity token for a songvoter token
      operationId: authWithGoogle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthToken"
        description: The google identity token
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
  /partys:
    post:
      tags:
        - party
      summary: Creates a new party
      operationId: createParty
      responses:
        "200":
          description: successful created
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Party"
    get:
      tags:
        - party
      summary: Returns all parties of the curent user
      operationId: getParties
      responses:
        "200":
          description: successful created
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Party"
  "/party/{partyId}/join":
    post:
      tags:
        - party
      summary: Joins a party
      operationId: joinParty
      parameters:
        - name: partyId
          in: path
          description: ID of party to join
          required: true
          schema:
            type: string
      responses:
        "201":
          description: joined successfully
  "/party/{partyId}/leave":
    post:
      tags:
        - party
      summary: Leave a party
      operationId: leaveParty
      parameters:
        - name: partyId
          in: path
          description: ID of party to leave
          required: true
          schema:
            type: string
      responses:
        "201":
          description: left successfully
  "/party/{partyId}/kick/{userId}":
    post:
      tags:
        - party
      summary: kicks a user from a party
      operationId: kickFromParty
      parameters:
        - name: partyId
          in: path
          description: ID of party to leave
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of user to kick
          required: true
          schema:
            type: string
      responses:
        "201":
          description: left successfully
  "/party/{partyId}/invite/{userId}":
    post:
      tags:
        - party
      summary: Invites a user to a party
      operationId: inviteToParty
      parameters:
        - name: partyId
          in: path
          description: ID of party to invite to
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of user to invite
          required: true
          schema:
            type: string
      responses:
        "201":
          description: invite sent
  "/party/{partyId}/inviteLink":
    get:
      tags:
        - party
      summary: Creates an invite link for a party
      operationId: createInviteLink
      parameters:
        - name: partyId
          in: path
          description: ID of party to invite to
          required: true
          schema:
            type: string
      responses:
        "200":
          description: invite created
  "/party/{partyId}/nextSong":
    get:
      tags:
        - party
      summary: gets the next Song
      operationId: nextSong
      parameters:
        - name: partyId
          in: path
          description: ID of party
          required: true
          schema:
            type: string
      responses:
        "200":
          description: invite created
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Song"
  "/party/{partyId}/reset":
    post:
      tags:
        - party
      summary: resets the parties playing state
      operationId: resetParty
      parameters:
        - name: partyId
          in: path
          description: ID of party to invite to
          required: true
          schema:
            type: string
      responses:
        "200":
          description: reset party
  "/party/{partyId}/upvote/{songId}":
    post:
      tags:
        - party
      summary: votes a song up so it is play sooner
      description: Adds an upvote to an song wich causes it to be played sooner. Also adds
        new songs to a party
      operationId: upvoteSong
      parameters:
        - name: partyId
          in: path
          description: ID of party
          required: true
          schema:
            type: string
        - name: songId
          in: path
          description: ID of the song to upvote
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: upvoted
  "/party/{partyId}/downvote/{songId}":
    post:
      tags:
        - party
      summary: votes a song down so it is play later/not at all
      operationId: downvoteSong
      parameters:
        - name: partyId
          in: path
          description: ID of party
          required: true
          schema:
            type: string
        - name: songId
          in: path
          description: ID of the song
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: downvote accepted
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://songvoter.coflnet.com/v1
components:
  securitySchemes:
    songvoter_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://songvoter.coflnet.com/oauth/dialog
          scopes:
            write:song: modify songs
            read:song: "read songs "
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ExternalSong:
      type: object
      required:
        - externalId
        - platform
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Lady Gaga - Poker Face (Official Music Video)
        artist:
          type: string
          example: Lady Gaga
        thumbnail:
          type: string
          example: https://i.ytimg.com/vi/bESGLojNYSo/hq720.jpg
        externalId:
          type: string
          example: bESGLojNYSo
        platform:
          type: string
          description: The platform of this song
          enum:
            - youtube
            - spotify
      xml:
        name: Tag
    Song:
      type: object
      required:
        - song
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Lady Gaga - Poker Face (Official Music Video)
        occurences:
          type: array
          items:
            $ref: "#/components/schemas/ExternalSong"
    SongCreation:
      type: object
      properties:
        externalId:
          type: string
          example: bESGLojNYSo
        platform:
          type: string
          description: The platform of this song
          enum:
            - youtube
            - spotify
    PlayList:
      type: object
      properties:
        id:
          type: integer
          example: 43873
        title:
          type: string
          example: My playlist
        songs:
          type: array
          items:
            type: integer
    AuthToken:
      type: object
      properties:
        token:
          type: string
          example: ey...
    Party:
      type: object
      properties:
        id:
          type: string
          example: 22fed76bbf8e4f8d93f8eb204ea42167
        name:
          type: string
          example: Birthday
        members:
          type: array
          items:
            description: userIds
            type: integer
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string